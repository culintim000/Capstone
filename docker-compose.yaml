version: '3.8'

networks:
  timscapstone.1:
    external: false

services:
  sqlserver:
    container_name: sqlserver
    build:
      context: ./sql/
      dockerfile: sqlsetup.dockerfile
    image: sqlserver:1
    ports:
      - "1431:1433"
    networks:
      - timscapstone.1
    environment:
      SA_PASSWORD: "abc123!!@"
      ACCEPT_EULA: "Y"

  message-queue:
    container_name: message-queue
    image: rabbitmq:3.10-management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - timscapstone.1

  eureka:
    container_name: eureka
    image: steeltoeoss/eureka-server
    ports:
      - "8761:8761"
    networks:
      - timscapstone.1

  mongodb:
    container_name: mongodb
    image: mongo
    ports: 
      - "27027:27017"
    networks:
      - timscapstone.1

  gateway:
    container_name: gateway
    build:
      context: ./GatewayDemo
      dockerfile: 2.dockerfile
    image: gateway:1
    ports:
      - "8888:8888"
    networks:
      - timscapstone.1
    depends_on:
      - eureka
    # deploy:
    #   restart_policy:
    #     condition: on-failure
    #     delay: 5s
    #     max_attempts: 3
    #     window: 120s

  auth-service:
    # container_name: auth-service #remove this
    build:
      context: ./auth-service
      dockerfile: auth.dockerfile
    image: auth-service:1
    ports:
      # -  "7244:80" #remove this
      - "80"
    networks:
      - timscapstone.1
    depends_on:
      - eureka
      - sqlserver
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  booking-service:
    build: 
      context: ./BookingService
      dockerfile: Dockerfile
    image: booking-service:1
    ports: 
      - "80"
    networks:
      - timscapstone.1
    depends_on:
      - eureka
      - mongodb
      - message-queue
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s


  # message-consumer:
  #   container_name: message-consumer
  #   build: 
  #     context: ./RabbitConsumerService
  #     dockerfile: Dockerfile
  #   image: message-consumer:1
  #   ports: 
  #     - "9000:9000"
  #   networks: 
  #     - timscapstone.1
  #   depends_on:
  #     - message-queue

  inventory-service:
    build:
      context: ./Inventory
      dockerfile: 2.dockerfile
    image: inventory-service:1
    # ports:
    #   # -  "7244:80" #remove this
    #   - "7002:80"
    networks:
      - timscapstone.1
    depends_on:
      - eureka
      - mongodb
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s


  cart-service:
      build:
        context: ./Cart
        dockerfile: 2.dockerfile
      image: cart-service:1
      # ports:
      #   - "7000:80"
      networks:
        - timscapstone.1
      depends_on:
        - eureka
        - mongodb
      deploy:
        replicas: 3
        restart_policy:
          condition: on-failure
          delay: 5s
          max_attempts: 3
          window: 120s


  checkout-service:
      build:
        context: ./Checkout
        dockerfile: 2.dockerfile
      image: checkout-service:1
      # ports:
      #   - "7001:80"
      networks:
        - timscapstone.1
      depends_on:
        - eureka
        - mongodb
      deploy:
        replicas: 3
        restart_policy:
          condition: on-failure
          delay: 5s
          max_attempts: 3
          window: 120s